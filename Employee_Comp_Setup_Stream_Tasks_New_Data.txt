-- This script is used to setup the new data stream of new employees
-- Steps in this file:
    1.  Create new table to hold new data coming in:  EMPLOYEE_COMP_NEW_DATA
    2.  CALL Add_Random_Emp_Data();  -- Procedure to add new data - created in Python - see separate script
    3.  Create stream to hold new data changes - named: STREAM_NEW_EMP_DATA
    4.  Create new table to hold all data - from RAW set and NEW data (from stream):  EMPLOYEE_COMP_FULL
    5.  Create task to run procedure to create new records on a schedule (similar to a data stream or batch): task_load_new_employee_records
    5.  Create task to insert to load any new records to FULL table:  task_load_new_employee_records
    6.  Now new data will be added to the FULL table on a daily (or whatever schedule) basis
    7.  The EMPLOYEE_COMP_FULL table can then be used for reporting, analysis, and/or joined with additional datasets

    

-- The EMPLOYEE_COMP_NEW_DATA will hold all new data created - 
   -- NOTE:  This data will be pulled from the stream rather than the entire table 
   --        to get added to the FULL table 
SELECT * FROM EMPLOYEE_COMP_NEW_DATA
DELETE FROM  EMPLOYEE_COMP_NEW_DATA

create or replace TABLE KA_DB.K_ANALYTICS.EMPLOYEE_COMP_NEW_DATA (
	YEAR VARCHAR(4),
	JOBFAMILY VARCHAR(16777216),
	JOB VARCHAR(16777216),
	EMPLOYEEIDENTIFIER VARCHAR(16777216),
	TOTALSALARY NUMBER(38,0),
	TOTALCOMPENSATION NUMBER(38,0),
	DATETIME_ADDED TIMESTAMP
);



-- We have create a python prodedure to add some random data (see separate script)
--DEPLOYED AS:
Add_Random_Emp_Data

-- EXECUTE:
CALL Add_Random_Emp_Data();


-- STREAM ----------------
-- This will create a stream on the table above.  The stream will hold all new records created by the python proc
   -- until a DML statement is run, which will be used to only add new records to the FULL table 
create or replace stream KA_DB.K_ANALYTICS.STREAM_NEW_EMP_DATA on TABLE EMPLOYEE_COMP_NEW_DATA;


-- SCHEDULE THIS TO RUN DAILY ON TASK 
-- Create a task that calls the stored procedure every hour
CREATE OR REPLACE TASK task_create_new_employee_data
  warehouse = KA_WH
  schedule = '5 minute'
as
  call Add_Random_Emp_Data();

ALTER TASK task_create_new_employee_data RESUME 
  
SHOW TASKS 

-- THE DML CLEARS OUT THE STREAM  - ONLY FIFTY NEW RECORDS
SELECT * FROM STREAM_NEW_EMP_DATA
-- 50 AT 11:37 
  

-- FULL TABLE ---------------------------------------------------------------------------
-- ADD A TABLE FOR THE FULL SET 
    -- THIS WILL HOLD OUR RECORDS FROM THE DBT MATERIALIZED VIEW 
    -- AND NEW RECORDS CREATED FROM THE PYTHON PROC 
create or replace TABLE KA_DB.K_ANALYTICS.EMPLOYEE_COMP_FULL (
	EMPLOYEEIDENTIFIER VARCHAR(16777216),
	JOB VARCHAR(16777216),
	YEAR VARCHAR(4),
	TOTALSALARY NUMBER(38,0),
	TOTALCOMPENSATION NUMBER(38,0),
    SOURCE VARCHAR(6),
    DATE_ADDED TIMESTAMP_NTZ(9)
);



ALTER TASK task_create_new_employee_data SUSPEND

-- CREATE ANOTHER TASK TO RUN TO PUSH NEW RECORDS INTO THE FULL TABLE ---   
-- create 
-- After CREATE task runs
-- This task clears out stream
CREATE OR REPLACE TASK task_load_new_employee_records 
  WAREHOUSE = KA_WH
  AFTER task_create_new_employee_data
  AS
    INSERT INTO EMPLOYEE_COMP_FULL
    WITH CTE_JOIN AS (
        SELECT EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'RAW', CURRENT_TIMESTAMP FROM EMPLOYEE_COMP_TRANSFORMED
        UNION ALL 
        SELECT  EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'STREAM', CURRENT_TIMESTAMP FROM STREAM_NEW_EMP_DATA AS         S WHERE NOT EXISTS 
             (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_TRANSFORMED AS T WHERE 
             S.YEAR = T.YEAR AND S.EMPLOYEEIDENTIFIER = T.EMPLOYEEIDENTIFIER)
             )
    SELECT * FROM CTE_JOIN WHERE NOT EXISTS
             (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_FULL AS F WHERE 
             CTE_JOIN.YEAR = F.YEAR AND CTE_JOIN.EMPLOYEEIDENTIFIER = F.EMPLOYEEIDENTIFIER)


-- SUSPEND BOTH TASKS 
ALTER TASK task_load_new_employee_records SUSPEND  
ALTER TASK task_create_new_employee_data SUSPEND

-- RESUME THEM IN THIS ORDER 
ALTER TASK task_load_new_employee_records RESUME 
ALTER TASK task_create_new_employee_data RESUME
--Unable to update graph with root task KA_DB.K_ANALYTICS.TASK_CREATE_NEW_EMPLOYEE_DATA since that root task is not suspended.


SHOW TASKS 


SELECT COUNT(*) FROM EMPLOYEE_COMP_FULL

-- TO TEST TASKS AND STREAMS - CLEAR OUT THE STREAM SOURCES - 11:57 - SHOULD BE 50 RECORDS ADDED WITHIN 5-6 MINUTES 
DELETE FROM EMPLOYEE_COMP_FULL WHERE SOURCE = 'STREAM'
-- CLEARED ALL OUT 11:58
-- SHOULD RUN AROUND 12:03 - CHECK FULL TABLE 

SELECT *  FROM EMPLOYEE_COMP_FULL WHERE SOURCE = 'STREAM'
-- 0 AT 12:00 
-- 43 AT 12:04 
-- 63 AT 12:18

-- THE DML CLEARS OUT THE STREAM  - ONLY FIFTY NEW RECORDS
SELECT * FROM STREAM_NEW_EMP_DATA
-- 0 AT 12:04 - VERIFIED CLEAR WORKS 



SHOW TASKS 


-- SUSPEND TASKS FOR NOW ------ 
ALTER TASK task_create_new_employee_data SUSPEND;
ALTER TASK task_load_new_employee_records SUSPEND;  









-- WIP --------------------------------------
-- WIP --------------------------------------
-- WIP --------------------------------------
-- WIP --------------------------------------


-- INITIAL 2,546
INSERT INTO EMPLOYEE_COMP_FULL
WITH CTE_JOIN AS (
    SELECT EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'RAW', CURRENT_TIMESTAMP FROM EMPLOYEE_COMP_TRANSFORMED
    UNION ALL 
    SELECT  EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'STREAM', CURRENT_TIMESTAMP FROM STREAM_NEW_EMP_DATA AS         S WHERE NOT EXISTS 
         (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_TRANSFORMED AS T WHERE 
         S.YEAR = T.YEAR AND S.EMPLOYEEIDENTIFIER = T.EMPLOYEEIDENTIFIER)
         )
SELECT * FROM CTE_JOIN WHERE NOT EXISTS
         (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_FULL AS F WHERE 
         CTE_JOIN.YEAR = F.YEAR AND CTE_JOIN.EMPLOYEEIDENTIFIER = F.EMPLOYEEIDENTIFIER)


-- EXECUTE:
CALL Add_Random_Emp_Data();

-- THE DML CLEARS OUT THE STREAM  - ONLY FIFTY NEW RECORDS
SELECT * FROM STREAM_NEW_EMP_DATA

DELETE FROM EMPLOYEE_COMP_FULL WHERE EMPLOYEEIDENTIFIER = '1017'


-- After insert - this clears out stream
INSERT INTO EMPLOYEE_COMP_FULL
WITH CTE_JOIN AS (
    SELECT EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'RAW', CURRENT_TIMESTAMP FROM EMPLOYEE_COMP_TRANSFORMED
    UNION ALL 
    SELECT  EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'STREAM', CURRENT_TIMESTAMP FROM STREAM_NEW_EMP_DATA AS         S WHERE NOT EXISTS 
         (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_TRANSFORMED AS T WHERE 
         S.YEAR = T.YEAR AND S.EMPLOYEEIDENTIFIER = T.EMPLOYEEIDENTIFIER)
         )
SELECT * FROM CTE_JOIN WHERE NOT EXISTS
         (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_FULL AS F WHERE 
         CTE_JOIN.YEAR = F.YEAR AND CTE_JOIN.EMPLOYEEIDENTIFIER = F.EMPLOYEEIDENTIFIER)





SELECT EMPLOYEEIDENTIFIER, YEAR, 'STREAM', *  FROM STREAM_NEW_EMP_DATA WHERE EMPLOYEEIDENTIFIER = '44041' 
SELECT  EMPLOYEEIDENTIFIER, YEAR, 'RAW', * FROM EMPLOYEE_COMP_TRANSFORMED AS S WHERE EMPLOYEEIDENTIFIER = '44041' 


-- create 
-- After insert - this clears out stream
CREATE OR REPLACE PROCEDURE proc_load_new_data as 
INSERT INTO EMPLOYEE_COMP_FULL
WITH CTE_JOIN AS (
    SELECT EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'RAW', CURRENT_TIMESTAMP FROM EMPLOYEE_COMP_TRANSFORMED
    UNION ALL 
    SELECT  EMPLOYEEIDENTIFIER, JOB, YEAR, TOTALSALARY, TOTALCOMPENSATION, 'STREAM', CURRENT_TIMESTAMP FROM STREAM_NEW_EMP_DATA AS         S WHERE NOT EXISTS 
         (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_TRANSFORMED AS T WHERE 
         S.YEAR = T.YEAR AND S.EMPLOYEEIDENTIFIER = T.EMPLOYEEIDENTIFIER)
         )
SELECT * FROM CTE_JOIN WHERE NOT EXISTS
         (SELECT EMPLOYEEIDENTIFIER FROM EMPLOYEE_COMP_FULL AS F WHERE 
         CTE_JOIN.YEAR = F.YEAR AND CTE_JOIN.EMPLOYEEIDENTIFIER = F.EMPLOYEEIDENTIFIER)



-- CREATE A VIEW IN DBT TO COMBINE THE NEW DATA FROM STREAM WITH FINAL DATASET AS THE FINAL SET TO DO ANALYSIS ON:

-- HOW SHOULD THE WORKFLOW WORK?

--?
create or replace task KA_DB.K_ANALYTICS.DAILY_NEW_EMP_COMP_DATA
	warehouse=KA_WH
	when SYSTEM$STREAM_HAS_DATA('STREAM_NEW_EMP_DATA')
	as CALL K_ANALYTICS.TRACK_FROM_TASKS();

    

show tasks 



---- TASKS ----------------------------------------------------------------
create or replace task KA_DB.K_ANALYTICS.WATCH_FOR_SPOTS_CHANGE_TASK
	warehouse=KA_WH
	when SYSTEM$STREAM_HAS_DATA('STREAM_VSURFERS_AND_SPOTS')
	as CALL K_ANALYTICS.TRACK_FROM_TASKS();




